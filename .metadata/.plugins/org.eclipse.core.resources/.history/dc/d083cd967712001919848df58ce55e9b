/**
 ******************************************************************************
 * @file    main.c
 * @author  Ac6
 * @version V1.0
 * @date    01-December-2013
 * @brief   Default main function.
 ******************************************************************************
 */

#include "main.h" 	// Read that I never ever should include definitions (allocating of memory)
// in a header file so maybe I have to re-do this!
//Interface
#include "WM.h"
#include "GUI.h"

// ===========================================

#include "stm32f4xx.h"
#include "stm32f429i_discovery.h"
#include "periph_configs.h"

//#include "kalman_filter.h"
//#include "simple_filter.h"

static void SystemClock_Config(void);

static void BSP_Config(void);
void BSP_Background(void);

uint8_t GUI_Initialized = 0;
TIM_HandleTypeDef TimHandle;
uint32_t uwPrescalerValue = 0;


#define BUFFER_SIZE 200

// ADC buffer flags
volatile uint8_t ADC1HalfBuffer = 0;
volatile uint8_t ADC1FullBuffer = 0;
volatile uint8_t ADC2HalfBuffer = 0;
volatile uint8_t ADC2FullBuffer = 0;
volatile uint8_t ADC3HalfBuffer = 0;
volatile uint8_t ADC3FullBuffer = 0;

// Buffers for ADC's and DAC'
uint16_t ADC1InBuff[BUFFER_SIZE];
uint16_t ADC2InBuff[BUFFER_SIZE];
uint16_t ADC3InBuff[BUFFER_SIZE];
uint16_t DAC1OutBuff[BUFFER_SIZE];
uint16_t DAC2OutBuff[BUFFER_SIZE];

// Buffers for Application
uint16_t appBuff[BUFFER_SIZE];

//callback function for the background

static void _cbDesktop(WM_MESSAGE * pMsg) {
	switch (pMsg->MsgId) {
	case WM_PAINT:
		GUI_SetBkColor(GUI_BLACK);
		GUI_Clear();
		GUI_SetFont(&GUI_Font24_ASCII);
		GUI_DispStringAt("Loading...", 20, 20);
		break;
	}
}

// ===========================================

int main(void) {

	HAL_Init();

	/* Initialize LCD and LEDs */
	BSP_Config();

	SystemClock_Config();

	/* Compute the prescaler value to have TIM3 counter clock equal to 10 KHz */
	uwPrescalerValue = (uint32_t) ((SystemCoreClock / 2) / 10000) - 1;

	/* Set TIMx instance */
	TimHandle.Instance = TIM3;

	/* Initialize TIM3 peripheral as follows:
	 + Period = 500 - 1
	 + Prescaler = ((SystemCoreClock/2)/10000) - 1
	 + ClockDivision = 0
	 + Counter direction = Up
	 */
	TimHandle.Init.Period = 500 - 1;
	TimHandle.Init.Prescaler = uwPrescalerValue;
	TimHandle.Init.ClockDivision = 0;
	TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
	if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK) {
		while (1) {
		}
	}

	/*##-2- Start the TIM Base generation in interrupt mode ####################*/
	/* Start Channel1 */
	if (HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK) {
		while (1) {
		}
	}

	/***********************************************************/

	/* Init the STemWin GUI Library */
	GUI_Init();
	GUI_SetFont(&GUI_Font24_ASCII);
	GUI_Initialized = 1;

	/* Activate the use of memory device feature */
	//WM_SetCreateFlags(WM_CF_MEMDEV);

	MainTask();

	while (1)	;
}

/**
 * @brief  Period elapsed callback in non blocking mode
 * @param  htim: TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	BSP_Background();
}

// Synchronization for ADC1 buffer
void DMA2_Stream0_IRQHandler(void) {
	// Half transfer complete interrupt?
	if (DMA2->LISR & (1 << 4)) {
		// Clear interrupt flag
		DMA2->LIFCR |= 1 << 4;
		ADC1HalfBuffer = 1;
	}
	// Transfer complete interrupt?
	else if (DMA2->LISR & (1 << 5)) {
		// Clear interrupt flag
		DMA2->LIFCR |= 1 << 5;
		ADC1FullBuffer = 1;
	}
}

/**
 * @brief TIM MSP Initialization
 *        This function configures the hardware resources used in This application:
 *           - Peripheral's clock enable
 *           - Peripheral's GPIO Configuration
 * @param htim: TIM handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* TIMx Peripheral clock enable */
	__HAL_RCC_TIM3_CLK_ENABLE()
	;

	/*##-2- Configure the NVIC for TIMx ########################################*/
	/* Set the TIMx priority */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);

	/* Enable the TIMx global Interrupt */
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
}

// Synchronization for ADC2 buffer
void DMA2_Stream2_IRQHandler(void) {
	if (DMA2->LISR & (1 << 20)) {
		// Clear interrupt flag
		DMA2->LIFCR |= 1 << 20;
		ADC2HalfBuffer = 1;
	}
	// Transfer complete interrupt?
	else if (DMA2->LISR & (1 << 21)) {
		// Clear interrupt flag
		DMA2->LIFCR |= 1 << 21;
		ADC2FullBuffer = 1;
	}
}

// Synchronization for ADC3 buffer
void DMA2_Stream1_IRQHandler(void) {
	// Half transfer complete interrupt?
	if (DMA2->LISR & (1 << 10)) {
		// Clear interrupt flag
		DMA2->LIFCR |= 1 << 10;
		ADC3HalfBuffer = 1;
	}
	// Transfer complete interrupt?
	else if (DMA2->LISR & (1 << 11)) {
		// Clear interrupt flag
		DMA2->LIFCR |= 1 << 11;
		ADC3FullBuffer = 1;
	}
}

/**
 * @brief  BSP_Background.
 * @param  None
 * @retval None
 */
void BSP_Background(void) {
	BSP_LED_Toggle(LED3);
	BSP_LED_Toggle(LED4);

	/* Capture input event and update cursor */
	if (GUI_Initialized == 1) {
		BSP_Pointer_Update();
	}
}

/**
 * @brief  Initializes the STM32F429I-DISCO's LCD and LEDs resources.
 * @param  None
 * @retval None
 */
static void BSP_Config(void) {
	/* Initialize STM32F429I-DISCO's LEDs */
	BSP_LED_Init(LED3);
	BSP_LED_Init(LED4);

	/* Initializes the SDRAM device */
	BSP_SDRAM_Init();

	/* Initialize the Touch screen */
	if (BSP_TS_Init(240, 320) != TS_OK) {
		while (1);
	}

	/* Enable the CRC Module */
	__HAL_RCC_CRC_CLK_ENABLE();
}

/**
 * @brief  Provide the GUI with current state of the touch screen
 * @param  None
 * @retval None
 */

void BSP_Pointer_Update(void) {
	GUI_PID_STATE TS_State;
	static TS_StateTypeDef prev_state;
	TS_StateTypeDef ts;
	uint16_t xDiff, yDiff;

	BSP_TS_GetState(&ts);

	TS_State.Pressed = 0;
	if (ts.TouchDetected == 1) {
		TS_State.Pressed = 1;
	}

	xDiff = (prev_state.X > ts.X) ?
			(prev_state.X - ts.X) : (ts.X - prev_state.X);
	yDiff = (prev_state.Y > ts.Y) ?
			(prev_state.Y - ts.Y) : (ts.Y - prev_state.Y);

	if (ts.TouchDetected) {
		if ((prev_state.TouchDetected != ts.TouchDetected) || (xDiff > 3)
				|| (yDiff > 3)) {
			prev_state = ts;

			TS_State.Layer = 0;
			TS_State.x = ts.X;
			TS_State.y = ts.Y;
			GUI_TOUCH_StoreStateEx(&TS_State);
		}
	} else {
		TS_State.Layer = 0;
		TS_State.x = -1;
		TS_State.y = -1;
		GUI_TOUCH_StoreStateEx(&TS_State);
	}
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
static void SystemClock_Config(void) {

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	//Configure the main internal regulator output voltage

	__HAL_RCC_PWR_CLK_ENABLE()
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	//Initializes the CPU, AHB and APB busses clocks

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16; // 1MHz clock input to PLL
	RCC_OscInitStruct.PLL.PLLN = 360; // PLL multiplier, output of PLL = 1*360 = 360MHz
	RCC_OscInitStruct.PLL.PLLP = 2; // System clock = output of PLL / 2 = 180MHz
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		//_Error_Handler(__FILE__, __LINE__);
	}

	//Initializes the CPU, AHB and APB busses clocks

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
		//_Error_Handler(__FILE__, __LINE__);
	}

	//Configure the Systick interrupt time

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);

	//*Configure the Systick

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
	SystemCoreClockUpdate();
	// SysTick_IRQn interrupt configuration
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
}


void MainTask(void) {
	//initializes the filterState struct
//	struct arm_matrix_instance_f32 matmat;

	struct FilterState fState;
	fState.doneFlag = 0;
	fState.filterType = 'I';
	fState.filterState = 'I';
	fState.filterOrder = 2;
	fState.initMSE = 0;
	fState.initValue = 0;
	fState.vecInd = 6;

	fState.R_1 = 0;
	fState.R_2 = 0;

	fState.a_1 = 0;
	fState.a_2 = 0;
	fState.a_3 = 0;
	fState.a_4 = 0;

	fState.b_1 = 1;
	fState.b_2 = 0;
	fState.b_3 = 0;
	fState.b_4 = 0;

	char which_filter;

	//Sets the callback for desktop
	WM_SetCallback(WM_HBKWIN, _cbDesktop);

	//Loads and executes the desktop
	GUI_Delay(200);

	while (fState.doneFlag == 0) {
		switch (fState.filterType) {
		case 'I':
			//Menu for choosing filterype
			FilterChoice(&fState);
			break;

		case 'W':
			//WienerMenu(&fState);
			fState.doneFlag = 1;
			break;

		case 'N':
			//No filter
			fState.doneFlag = 1;
			break;

		case 'K':
			switch (fState.filterState) {
			case 'I':
				KalmanMenu(&fState);
				break;

			case 'X':
				fState.initValue = keypad();
				fState.filterState = 'I';
				break;

			case 'M':
				fState.initMSE = keypad();
				fState.filterState = 'I';
				break;

			case 'R':
				fState.R_1 = keypad();
				fState.filterState = 'I';
				break;

			case 'Q':
				fState.R_2 = keypad();
				fState.filterState = 'I';
				break;

			case 'O':
				fState.filterOrder = (int) keypad();
				fState.filterState = 'I';
				break;

			case 'a':
				switch (fState.vecInd) {
				case 6:
					aVecMenu(&fState);
					break;

				case 1:
					fState.a_1 = keypad();
					fState.vecInd = 6;
					break;

				case 2:
					fState.a_2 = keypad();
					fState.vecInd = 6;
					break;

				case 3:
					fState.a_3 = keypad();
					fState.vecInd = 6;
					break;

				case 4:
					fState.a_4 = keypad();
					fState.vecInd = 6;
					break;
				case 0:
					fState.vecInd = 6;
					fState.filterState = 'I';
				}
				fState.doneFlag = 0;
				break;

			case 'b':
				switch (fState.vecInd) {
				case 6:
					bVecMenu(&fState);
					break;

				case 1:
					fState.b_1 = keypad();
					fState.vecInd = 6;
					break;

				case 2:
					fState.b_2 = keypad();
					fState.vecInd = 6;
					break;

				case 3:
					fState.b_3 = keypad();
					fState.vecInd = 6;
					break;

				case 4:
					fState.b_4 = keypad();
					fState.vecInd = 6;
					break;
				case 0:
					fState.vecInd = 6;
					fState.filterState = 'I';
					break;
				}
				fState.doneFlag = 0;
				break;

			case 'G':
				fState.doneFlag = 2;
				break;
			}
			break;
		}
		GUI_Delay(200);
	}

	//translates the values from the interface to the actuall filters
	switch (fState.filterType)
	{
		case 'K':
			switch (fState.filterOrder)
			{
				case 1:
					//1Dfilter not float at the moment
					break;
				case 2:
					which_filter = 'E';
					break;
				case 3:
					which_filter = 'I';
					break;
				case 4:
					which_filter = 'J';
					break;
			}
			break;
		case 'W':
			//for wienerfiltering
			GUI_Clear();
			GUI_DispStringAt("Not Yet Implemented", 20, 20);
			break;
		case 'N':
			//No filtering applied, in = out
			GUI_Clear();
			GUI_DispStringAt("No Filter Applied", 20, 20);
			which_filter = 'A';
			break;
	}

		GUI_Delay(200);
		GUI_Clear();
		GUI_Exit();
		GUI_Delay(1000);

		//frees up a part of the SDRAM that is used bu the interface but needed by the filter
		static SDRAM_HandleTypeDef SdramHandle;
		 BSP_SDRAM_MspDeInit(&SdramHandle, (void *)NULL);

		initADC_DAC(ADC1InBuff, ADC2InBuff, ADC3InBuff, DAC1OutBuff, DAC2OutBuff, BUFFER_SIZE);

		//the struct that is feed to the filter

		struct Params fParams;
/*
		fParams.x_pred[0] = fState.initValue;
		fParams.x_pred[1] = fState.initValue;
		fParams.x_pred[2] = fState.initValue;
		fParams.x_pred[3] = fState.initValue;

		fParams.a[0] = 1;
		fParams.a[1] = fState.a_1;
		fParams.a[2] = fState.a_2;
		fParams.a[3] = fState.a_3;
		fParams.a[4] = fState.a_4;

		fParams.b[0] = fState.b_1;
		fParams.b[1] = fState.b_2;
		fParams.b[2] = fState.b_3;
		fParams.b[3] = fState.b_4;

		fParams.MSE_pred = fState.initMSE;

		fParams.C_u = fState.R_1;
		fParams.C_w = fState.R_2;
*/
		//debugg
		which_filter = 'J';

		// x_pred 		Dynamic variable
		fParams.x_pred[0] = 0;
		fParams.x_pred[1] = 0;
		fParams.x_pred[2] = 0;
		fParams.x_pred[3] = 0;

		// A 			Static variable
		fParams.a[0] = 1;
		fParams.a[1] = -0.8;
		fParams.a[2] = -0.2;
		fParams.a[3] = -0.01;
		fParams.a[4] = 0.05;

		// B			Static variable
		fParams.b[0] = 0.100;
		fParams.b[1] = 0.025;
		fParams.b[2] = 0.010;
		fParams.b[3] = 0.005;

		// MSE_pred		Dynamic variable
		fParams.MSE_pred = 100;

		// C_w;			Static variable
		fParams.C_w = 4;

		// C_u;			Static variable
		fParams.C_u = 1;


		switch (which_filter) {
		// Case 'S' works. //
		case 'A':
			infinite_loop_simple_style(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE);
			break;

			// Case 'X' works. //
		case 'B':
			infinite_loop_struct_style(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE);
			break;

			// Case 'K' does work (but with constant transition and measurement matrix).	//
		case 'C':
			infinite_loop_kalman_style(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE, &fParams);
			break;

			// Case 'I' not tested yet	(Subtracts the offset and deals with negative values)	//
			// Remember to change the offset value! //
		case 'D':
			infinite_loop_kalman_style_int(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE);
			break;

			// Case 'A' not yet implemented . (Extension of case 'I') //
		case 'E':
			infinite_loop_kalman_style_2D(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE, &fParams);
			break;

			// Case 'M' not yet implemented.  //
		case 'F':
			infinite_loop_matrix_style(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE);
			break;

		case 'G':
			infinite_loop_dynamic_style(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE);
			break;

		case 'H':
			infinite_loop_kalman_style_MD_static(&ADC1HalfBuffer,
					&ADC1FullBuffer, &ADC2HalfBuffer, &ADC2FullBuffer,
					&ADC3HalfBuffer, &ADC3FullBuffer, ADC1InBuff, ADC2InBuff,
					ADC3InBuff, DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE);
			break;

		case 'I':
			infinite_loop_kalman_style_3D(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE, &fParams);
			break;

		case 'J':
			infinite_loop_kalman_style_4D(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE, &fParams);
			break;

		default:
			;
			//print_error_on_screen();
		}
		while (1);
}


