/*
 * MainTask.c
 *
 *  Created on: 1 jan. 2019
 *      Author: Olof
 */

#include "WM.h"
#include "GUI.h"
#include "main.h"
#include "periph_configs.h"
#include "stm32f4xx.h"
#include "stm32f429i_discovery.h"

static void _cbDesktop(WM_MESSAGE * pMsg) {
	switch (pMsg->MsgId) {
	case WM_PAINT:
		GUI_SetBkColor(GUI_BLACK);
		GUI_Clear();
		GUI_SetFont(&GUI_Font24_ASCII);
		GUI_DispStringAt("Loading...", 20, 20);
		break;
	}
}

void MainTask(void) {
	//initializes the filterState struct
//	struct arm_matrix_instance_f32 matmat;

	struct FilterState fState;
	fState.doneFlag = 0;
	fState.filterType = 'I';
	fState.filterState = 'I';
	fState.filterOrder = 2;
	fState.initMSE = 0;
	fState.initValue = 0;
	fState.vecInd = 6;

	fState.R_1 = 0;
	fState.R_2 = 0;

	fState.a_1 = 0;
	fState.a_2 = 0;
	fState.a_3 = 0;
	fState.a_4 = 0;

	fState.b_1 = 1;
	fState.b_2 = 0;
	fState.b_3 = 0;
	fState.b_4 = 0;

	char which_filter;

	//Sets the callback for desktop
	WM_SetCallback(WM_HBKWIN, _cbDesktop);

	//Loads and executes the desktop
	GUI_Delay(200);

	while (fState.doneFlag == 0) {
		switch (fState.filterType) {
		case 'I':
			//Menu for choosing filterype
			FilterChoice(&fState);
			break;

		case 'W':
			//WienerMenu(&fState);
			GUI_Clear();
			GUI_DispStringAt("Not Yet Implemented", 20, 20);
			while (1)
				;
			break;

		case 'N':
			//No filter
			which_filter = 'N';
			GUI_Clear();
			GUI_DispStringAt("No Filter Applied", 20, 20);
			while (1)
				;
			break;

		case 'K':
			switch (fState.filterState) {
			case 'I':
				KalmanMenu(&fState);
				break;

			case 'X':
				fState.initValue = keypad();
				fState.filterState = 'I';
				break;

			case 'M':
				fState.initMSE = keypad();
				fState.filterState = 'I';
				break;

			case 'R':
				fState.R_1 = keypad();
				fState.filterState = 'I';
				break;

			case 'Q':
				fState.R_2 = keypad();
				fState.filterState = 'I';
				break;

			case 'O':
				fState.filterOrder = (int) keypad();
				fState.filterState = 'I';
				break;

			case 'a':
				switch (fState.vecInd) {
				case 6:
					aVecMenu(&fState);
					break;

				case 1:
					fState.a_1 = keypad();
					fState.vecInd = 6;
					break;

				case 2:
					fState.a_2 = keypad();
					fState.vecInd = 6;
					break;

				case 3:
					fState.a_3 = keypad();
					fState.vecInd = 6;
					break;

				case 4:
					fState.a_4 = keypad();
					fState.vecInd = 6;
					break;
				case 0:
					fState.vecInd = 6;
					fState.filterState = 'I';
				}
				fState.doneFlag = 0;
				break;

			case 'b':
				switch (fState.vecInd) {
				case 6:
					bVecMenu(&fState);
					break;

				case 1:
					fState.b_1 = keypad();
					fState.vecInd = 6;
					break;

				case 2:
					fState.b_2 = keypad();
					fState.vecInd = 6;
					break;

				case 3:
					fState.b_3 = keypad();
					fState.vecInd = 6;
					break;

				case 4:
					fState.b_4 = keypad();
					fState.vecInd = 6;
					break;
				case 0:
					fState.vecInd = 6;
					fState.filterState = 'I';
					break;
				}
				fState.doneFlag = 0;
				break;

			case 'G':
				fState.doneFlag = 2;
				break;
			}
			break;
		}
		GUI_Delay(200);
	}

	//translates the values from the interface to the actuall filters
	switch (fState.filterType) {
	case 'K':
		switch (fState.filterOrder) {
		case 1:
			//1Dfilter not float at the moment
			break;
		case 2:
			which_filter = 'E';
			break;
		case 3:
			which_filter = 'I';
			break;
		case 4:
			which_filter = 'J';
			break;
	break;
		case 'W':
			//for wienerfiltering
			GUI_Clear();
		//	GUI_DispStringAt("Not Yet Implemented", 20, 20);
			break;
		case 'N':
			//No filtering applied, in = out
			GUI_Clear();
			GUI_DispStringAt("No Filter Applied", 20, 20);
			which_filter = 'A';
			break;
		}

		GUI_Clear();
		GUI_DispStringAt("Nehe", 20, 20);
		GUI_Delay(200);
		GUI_Exit();

		initADC_DAC(ADC1InBuff, ADC2InBuff, ADC3InBuff, DAC1OutBuff, DAC2OutBuff,BUFFER_SIZE);

		//the struct that is feed to the filter
		struct Params fParams;

		fParams.x_pred[0] = fState.initValue;
		fParams.x_pred[1] = fState.initValue;
		fParams.x_pred[2] = fState.initValue;
		fParams.x_pred[3] = fState.initValue;

		fParams.a[0] = 1;
		fParams.a[1] = fState.a_1;
		fParams.a[2] = fState.a_2;
		fParams.a[3] = fState.a_3;
		fParams.a[4] = fState.a_4;

		fParams.b[0] = fState.b_1;
		fParams.b[1] = fState.b_2;
		fParams.b[2] = fState.b_3;
		fParams.b[3] = fState.b_4;

		fParams.MSE_pred = fState.initMSE;

		fParams.C_u = fState.R_1;
		fParams.C_w = fState.R_2;

		switch (which_filter) {
		// Case 'S' works. //
		case 'A':
			infinite_loop_simple_style(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE);
			break;

			// Case 'X' works. //
		case 'B':
			infinite_loop_struct_style(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE);
			break;

			// Case 'K' does work (but with constant transition and measurement matrix).	//
		case 'C':
			infinite_loop_kalman_style(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE, &fParams);
			break;

			// Case 'I' not tested yet	(Subtracts the offset and deals with negative values)	//
			// Remember to change the offset value! //
		case 'D':
			infinite_loop_kalman_style_int(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE);
			break;

			// Case 'A' not yet implemented . (Extension of case 'I') //
		case 'E':
			infinite_loop_kalman_style_2D(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE, &fParams);
			break;

			// Case 'M' not yet implemented.  //
		case 'F':
			infinite_loop_matrix_style(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE);
			break;

		case 'G':
			infinite_loop_dynamic_style(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE);
			break;

		case 'H':
			infinite_loop_kalman_style_MD_static(&ADC1HalfBuffer,
					&ADC1FullBuffer, &ADC2HalfBuffer, &ADC2FullBuffer,
					&ADC3HalfBuffer, &ADC3FullBuffer, ADC1InBuff, ADC2InBuff,
					ADC3InBuff, DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE);
			break;

		case 'I':
			infinite_loop_kalman_style_3D(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE, &fParams);
			break;

		case 'J':
			infinite_loop_kalman_style_4D(&ADC1HalfBuffer, &ADC1FullBuffer,
					&ADC2HalfBuffer, &ADC2FullBuffer, &ADC3HalfBuffer,
					&ADC3FullBuffer, ADC1InBuff, ADC2InBuff, ADC3InBuff,
					DAC1OutBuff, DAC2OutBuff, appBuff, BUFFER_SIZE, &fParams);
			break;

		default:;
			//print_error_on_screen();
		}

		while (1)	;
	}
}
