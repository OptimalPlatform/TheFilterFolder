/*
 * periph_configs.c
 *
 *  Created on: 12 aug. 2018
 *      Author: Myren
 */
#include "periph_configs.h"

static void ADC_config(ADC_TypeDef* hadc, uint8_t adc);
static void DMA2_config(DMA_Stream_TypeDef* hdma, ADC_TypeDef* hadc, uint16_t* dest, uint16_t size);
static void DMA1_config(DMA_Stream_TypeDef* hdma, uint32_t* dest, uint16_t* src, uint16_t size);


void initADC_DAC(uint16_t *bufferIn1, uint16_t *bufferIn2, uint16_t *bufferIn3,
					uint16_t *bufferOut1, uint16_t *bufferOut2, uint16_t bufferSize)
{

	/****** Timer 8 config. ******/
	// TIM8 clock enable
	RCC->APB2ENR |= (1 << 1);
	// Update event is selected as trigger output (TRGO) (Overflow in this case)
	TIM8->CR2 |= (1 << 5);
	// Prescaler
	TIM8->PSC = 180-1; // APB2 clock freq. is 90MHz so this gives a tim freq. of 1MHz
	// Auto reload
	TIM8->ARR = 20; // This gives a sampling freq. of 50kHz
	// Enable counter
	TIM8->CR1 |= (1 << 0);

	/****** GPIO config. ******/
	// GPIOC and GPIOA clock enable
	RCC->AHB1ENR |= (1 << 2) | (1 << 0);
	// Configure GPIO’s for analog mode
	// Outputs for DAC's
	GPIOA->MODER |= (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8);
	// Inputs for ADC's
	GPIOC->MODER |= (0 << 11) | (0 << 10) | (0 << 9) | (0 << 8) | (0 << 7) | (0 << 6) |	(0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) | (1 << 1) | (0 << 0);
	/******/

/****** ADC’s config. *****/
	/*** This affects all ADC's ***/
	// ADC1, ADC2 and ADC3 clock enable
	RCC->APB2ENR |= (1 << 10) | (1 << 9) | (1 << 8);
	// ADC prescaler = /8
	ADC->CCR |= (1 << 17);
	/***/
	ADC_config(ADC1, 1);
	ADC_config(ADC2, 2);
	ADC_config(ADC3, 3);

	/******/

	/****** DMA2 config. (periph. -> memory)******/
	// DMA1 and DMA2 clock enable
	RCC->AHB1ENR |= (1 << 22) | (1 << 21);
	// Stream 0 -> channel 0, Stream 2 -> channel 1, Stream 1 -> channel 2
	DMA2_Stream0->CR |= 0;
	DMA2_Stream2->CR |= 1;
	DMA2_Stream1->CR |= 2;
	DMA2_config(DMA2_Stream0, ADC1, bufferIn1, bufferSize);
	DMA2_config(DMA2_Stream2, ADC2, bufferIn2, bufferSize);
	DMA2_config(DMA2_Stream1, ADC3, bufferIn3, bufferSize);

	// Enable global interrupt for DMA2 stream 0
	NVIC_SetPriorityGrouping(2);
	NVIC_SetPriority (DMA2_Stream0_IRQn, 1);
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
	// Enable global interrupt for DMA2 stream 2
	NVIC_SetPriorityGrouping(2);
	NVIC_SetPriority (DMA2_Stream2_IRQn, 2);
	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
	// Enable global interrupt for DMA2 stream 1
	NVIC_SetPriorityGrouping(2);
	NVIC_SetPriority (DMA2_Stream1_IRQn, 3);
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);

/****** DAC config. ******/
	// DAC clock enable
	//RCC->APB1ENR |= (1 << 29);
	// TIM8 TRGO as trigger source, trigger enable, enable channels,
	DAC->CR |= (1 << 19) | (1 << 3) | (1 << 18) | (1 << 2) | (1 << 16) | (1 << 0);
	// DMA enable
	DAC->CR |= (1 << 28) | (1 << 12);

	/****** DMA1 config. (memory -> periph.) ******/
	DMA1_config(DMA1_Stream5, (uint32_t*)&DAC->DHR12R1, bufferOut1, bufferSize);
	DMA1_config(DMA1_Stream6, (uint32_t*)&DAC->DHR12R2, bufferOut2, bufferSize);
}

static void ADC_config(ADC_TypeDef* hadc, uint8_t adc)
{
	// Configure the ADC’s
	hadc->CR1 |= (1 << 13);// | (1 << 11);
	// Trigger detection on rising edge
	hadc->CR2 |= (1 << 28);
	// Timer 8 TRGO event as external trigger
	hadc->CR2 |= (1 << 27) | (1 << 26) | (1 << 25);
	// The EOC bit is set at the end of each regular conversion
	hadc->CR2 |= (1 << 10);

	switch(adc)
	{
		case 1:
			// 15 cycles sampling time for channel 14 for ADC1
			ADC1->SMPR1 |= (1 << 12);
			// CH14 as first conversion for ADC1
			ADC1->SQR3 |= 14;
		break;
		case 2:
			// 15 cycles sampling time for channel 12 for ADC2
			ADC2->SMPR1 |= (1 << 6);
			// CH12 as first conversion for ADC2
			ADC2->SQR3 |= 12;
		break;
		case 3:
			// 15 cycles sampling time for channels 10 & 11 for ADC3
			ADC3->SMPR1 |= (1 << 0);
			// CH10 as first conversion for ADC3
			ADC3->SQR3 |= 10;
		break;
	}
	// ADC enable
	hadc->CR2 |= (1 << 0);
}

static void DMA2_config(DMA_Stream_TypeDef* hdma, ADC_TypeDef* hadc, uint16_t* dest, uint16_t size)
{
	// Peripheral data register address
	hdma->PAR = (uint32_t)&hadc->DR;
	// Memory destination address
	hdma->M0AR = (uint32_t)dest;
	// Number of data items to be transferred
	hdma->NDTR = size;
	// High priority
	hdma->CR |= (1 << 17) | (1 << 16);
	// Half-word transfers
	hdma->CR |= (1 << 13) | (1 << 11);
	// Memory increment mode
	hdma->CR |= (1 << 10);
	// Circular mode
	hdma->CR |= (1 << 8);
	// Transfer and half transfer complete interrupt enable
	hdma->CR |= (1 << 4) | (1 << 3);// | (1 << 2) | (1 << 1);
	// ADC DMA
	hadc->CR2 |= (1 << 8) | (1 << 9);
	// Enable stream
	hdma->CR |= (1 << 0);
}

static void DMA1_config(DMA_Stream_TypeDef* hdma, uint32_t* dest, uint16_t* src, uint16_t size)
{
	// Channel 7
	hdma->CR |= (7 << 25);
	// Priority very high
	hdma->CR |= (3 << 16);
	// Half-word transfers
	hdma->CR |= (1 << 13) | (1 << 11);
	// Memory increment mode
	hdma->CR |= (1 << 10);
	// Circular mode
	hdma->CR |= (1 << 8);
	// Memory to peripheral
	hdma->CR |= (1 << 6);
	// Number of transfers
	hdma->NDTR = size;
	// Address to peripheral data registers
	hdma->PAR = (uint32_t)dest;
	// Memory source address
	hdma->M0AR = (uint32_t)src;
	// Enable DMA
	hdma->CR |= (1 << 0);
}
