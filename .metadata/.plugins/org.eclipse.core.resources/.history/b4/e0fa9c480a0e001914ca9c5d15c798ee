/*
 * MainTask.c
 *
 *  Created on: 1 jan. 2019
 *      Author: Olof
 */

#include "WM.h"
#include "GUI.h"
#include "main.h"

static void _cbDesktop(WM_MESSAGE * pMsg)
{
	switch (pMsg->MsgId)
	{
	case WM_PAINT:
		GUI_SetBkColor(GUI_BLACK);
		GUI_Clear();
		GUI_SetFont(&GUI_Font24_ASCII);
		GUI_DispStringAt("Loading...", 20, 20);
		break;
	}
}

void MainTask(void)
{
	//initializes the filterState struct
//	struct arm_matrix_instance_f32 matmat;

	struct FilterState fState;
	fState.doneFlag = 0;
	fState.filterType = 'I';
	fState.filterState = 'I';
	fState.filterOrder = 2;
	fState.initMSE = 0;
	fState.initValue = 0;
	fState.vecInd = 6;

	fState.R_1 = 0;
	fState.R_2 = 0;

	fState.a_1 = 0;
	fState.a_2 = 0;
	fState.a_3 = 0;
	fState.a_4 = 0;

	fState.b_1 = 1;
	fState.b_2 = 0;
	fState.b_3 = 0;
	fState.b_4 = 0;

	//Sets the callback for desktop
	WM_SetCallback(WM_HBKWIN, _cbDesktop);

	//Loads and executes the desktop
	GUI_Delay(200);

	while (fState.doneFlag == 0)
	{
		switch (fState.filterType)
		{
		case 'I':
			//Menu for choosing filterype
			FilterChoice(&fState);
			break;

		case 'W':
			//WienerMenu(&fState);
			GUI_Clear();
			GUI_DispStringAt("Not Yet Implemented", 20, 20);
			while (1)
				;
			break;

		case 'N':
			//No filter
			GUI_Clear();
			GUI_DispStringAt("No Filter Applied", 20, 20);
			while (1);
			break;

		case 'K':
			switch (fState.filterState)
			{
			case 'I':
				KalmanMenu(&fState);
				break;

			case 'X':
				fState.initValue = keypad();
				fState.filterState = 'I';
				break;

			case 'M':
				fState.initMSE = keypad();
				fState.filterState = 'I';
				break;

			case 'R':
				fState.R_1 = keypad();
				fState.filterState = 'I';
				break;

			case 'Q':
				fState.R_2 = keypad();
				fState.filterState = 'I';
				break;

			case 'O':
				fState.filterOrder = (int) keypad();
				fState.filterState = 'I';
				break;

			case 'a':
				switch (fState.vecInd)
				{
				case 6:
					aVecMenu(&fState);
					break;

				case 1:
					fState.a_1 = keypad();
					fState.vecInd = 6;
					break;

				case 2:
					fState.a_2 = keypad();
					fState.vecInd = 6;
					break;

				case 3:
					fState.a_3 = keypad();
					fState.vecInd = 6;
					break;

				case 4:
					fState.a_4 = keypad();
					fState.vecInd = 6;
					break;
				case 0:
					fState.vecInd = 6;
					fState.filterState = 'I';
				}
				fState.doneFlag = 0;
				break;

			case 'b':
				switch (fState.vecInd)
				{
				case 6:
					bVecMenu(&fState);
					break;

				case 1:
					fState.b_1 = keypad();
					fState.vecInd = 6;
					break;

				case 2:
					fState.b_2 = keypad();
					fState.vecInd = 6;
					break;

				case 3:
					fState.b_3 = keypad();
					fState.vecInd = 6;
					break;

				case 4:
					fState.b_4 = keypad();
					fState.vecInd = 6;
					break;
				case 0:
					fState.vecInd = 6;
					fState.filterState = 'I';
					break;
				}
				fState.doneFlag = 0;
				break;

			case 'G':
				fState.doneFlag = 2;
				break;
			}
			break;
		}
		GUI_Delay(200);
	}

	GUI_SelectLayer(0);
	GUI_Clear();
	GUI_DispStringAt("initial value", 20, 20);
	GUI_DispDecAt(fState.initValue, 20, 40, 4);
	GUI_DispStringAt("initial MSE", 20, 60);
	GUI_DispDecAt(fState.initMSE, 20, 80, 4);
	GUI_DispStringAt("R_1", 20, 100);
	GUI_DispDecAt(fState.R_2, 20, 120, 4);
	GUI_DispStringAt("R_2", 20, 140);
	GUI_DispDecAt(fState.R_2, 20, 160, 4);
	GUI_DispStringAt("Model order", 20, 180);
	GUI_DispDecAt(fState.filterOrder, 20, 200, 4);

	while (1)
		;
}
