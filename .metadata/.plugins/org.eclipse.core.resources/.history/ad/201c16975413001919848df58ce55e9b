/*
 * infinite_loop_kalman_style.c
 *
 *  Created on: 26 nov. 2018
 *      Author: User
 */


//#include "stdint.h" // To get uint16_t (Could also use inttypes.h)
#include "kalman_filter.h" //kalman_filter(y, x_pred, MSE_pred, A, B, H, C_w, C_u);
#include "parameters.h"

/*
 * Notation:
 * 			For notation on the variables used here, see kalman_filter.c.
 * Note:
 * 		If I fix the signals as:
 * 		// Dynamic variables
 *		Data.x_est = 1;
 *		Data.x_pred = 0;
 *		Data.MSE_pred = 1;
 *
 *		// Fixed variables
 *		Data.A = 1;
 *		Data.B = 1;
 * 		Data.H = 1;
 *		Data.C_w = 4;
 * 		Data.C_u = 1;
 *
 * 		I get an output that seems nice.
 */
void infinite_loop_kalman_style(	volatile uint8_t* ADC1HalfBuffer, volatile uint8_t* ADC1FullBuffer,
									volatile uint8_t* ADC2HalfBuffer, volatile uint8_t* ADC2FullBuffer,
									volatile uint8_t* ADC3HalfBuffer, volatile uint8_t* ADC3FullBuffer,
									uint16_t* ADC1InBuff, uint16_t* ADC2InBuff,
									uint16_t* ADC3InBuff, uint16_t* DAC1OutBuff,
									uint16_t* DAC2OutBuff, uint16_t* appBuff,
									uint32_t BUFFER_SIZE, struct Params* Parameters) // Should BUFFER_SIZE really be 32 long. The for loops below are 16 long.
{

	struct Data1D Data;

	// choose the above variables
	//interface(&choose_variables, Data);

	// Start of debug part ====================================

	// Dynamic variables
	Data.x_est = 1;
	Data.x_pred = Parameters->x_pred[0];
	Data.MSE_pred = Parameters->MSE_pred;

	// Fixed variables
	Data.A = Parameters->a[1];
	Data.B = Parameters->b[1];
	Data.H = 1;
	Data.C_w = Parameters->C_w;
	Data.C_u = Parameters->C_u;

	// End of debug part ========================================

	for(;;)
		{
			while(!*ADC1HalfBuffer); // Question: Do I need extra parentheses around *ADC1HalfBuffer?
			for(uint16_t i=0; i<BUFFER_SIZE/2; i++)
			{
				kalman_filter(&Data,(float32_t) (ADC1InBuff[i]));
				DAC1OutBuff[i] = Data.x_est;
				//DAC1OutBuff[i] = ADC1InBuff[i];
			}
			*ADC1HalfBuffer = 0;

			while(!*ADC1FullBuffer);
			for(uint16_t i=0; i<BUFFER_SIZE/2; i++)
			{
				kalman_filter(&Data, (float32_t) (ADC1InBuff[i+BUFFER_SIZE/2]));
				DAC1OutBuff[i+BUFFER_SIZE/2] = Data.x_est;
				//DAC1OutBuff[i+BUFFER_SIZE/2] = ADC1InBuff[i+BUFFER_SIZE/2];
			}
			*ADC1FullBuffer = 0;
		}
}


/*
 * Comment:
 * 			It seems that I am not allowed to assign something to an array type.
 * 			Solution: Input the stuff-array instead and let the function modify it.
 * 			Or! Create a Struct with all the Kalman info that you input.
 * 			But what should the output be then?
 * 			Maybe like this:
 * 						https://stackoverflow.com/questions/8095078/how-to-modify-a-struct-in-a-function-and-return-to-main
 */
